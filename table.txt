<A>→<B>.
<B>→ [<C>][<E>][<F>]<H>
<C> → CONST<D>{ ,<D>};
<D> → ident=number
<E> → VAR ident{ ,ident};
<F> → <G><B>;{<F>}
<G>→ procedure ident;
<H> → <I>|<R>|<T>|<S>|<U>|<V>|<J>|<空>
<I> → ident:=<L>
<J> → begin<H>{ ;<H>}end
<K> → <L><Q><L>|odd<L>
<L> → [+|-]<M>{<O><M>}
<M> → <N>{<P><N>}
<N> → ident|number|(<L>)
<O> → +|-
<P> → *|/
<Q> → =|#|<|<=|>|>=
<R> → if<K>then<H>
<S> → call ident
<T> → while<K>do<H>
<U> → read(ident{ ，ident})
<V> → write(<L>{，<L>})






FIRST(程序)={const,var,procedure,ident,if,while,call,read,write,begin,空}
FIRST(分程序)={const,var,procedure,ident,if,while,call,read,write,begin,空}
FIRST(常量说明部分)={const}
FIRST(常量定义)={ident}
FIRST(无符号整数)={number}
FIRST(变量说明部分)={var}
FIRST(标识符)={ident}
FIRST(过程说明部分)={procedure}
FIRST(过程首部)={procedure}
FIRST(语句)={ident,if,while,call,read,write,begin,空}
FIRST(赋值语句)={ident}
FIRST(复合语句)={begin}
FIRST(条件)={+,-,ident,number,(}
FIRST(表达式)={+,-,ident,number,(}
FIRST(项)={ident,number,(}
FIRST(因子)={ident,number,(}
FIRST(加减运算符)={+，-}
FIRST(乘除运算符)={*,/}
FIRST(关系运算符)={=,#,<,<=,>,>=}
FIRST(条件语句)={if}
FIRST(过程调用语句)={call}
FIRST(当型循环语句)={while}
FIRST(读语句)={read}
FIRST(写语句)={write}



FOLLOW(程序)={$}
FOLLOW(分程序)={.}
FOLLOW(常量说明部分)={.,var,procedure,ident,if,while,call,read,write,begin}
FOLLOW(常量定义)={',',;}
FOLLOW(无符号整数)={',',;,*,/,+，-,=,#,<,<=,>,>=,then,do,),.,end}
FOLLOW(变量说明部分)={.,procedure,ident,if,while,call,read,write,begin}
FOLLOW(标识符)={=,',',;,:=,)}+yinzi+guochengdiaoyong
FOLLOW(过程说明部分)={.,ident,if,while,call,read,write,begin}
FOLLOW(过程首部)={;,const,var,procedure,ident,if,while,call,read,write,begin}
FOLLOW(语句)={.,;,end}
FOLLOW(赋值语句)={.,;,end}
FOLLOW(复合语句)={.,;,end}
FOLLOW(条件)={then,do}
FOLLOW(表达式)={=,#,<,<=,>,>=,then,do,),',',.,;,end}
FOLLOW(项)={+，-,=,#,<,<=,>,>=,then,do,),',',.,;,end}
FOLLOW(因子)={*,/,+，-,=,#,<,<=,>,>=,then,do,),',',.,;,end}
FOLLOW(加减运算符)={ident,number,(}
FOLLOW(乘除运算符)={ident,number,(}
FOLLOW(关系运算符)={+,-,ident,number,(}
FOLLOW(条件语句)={.,;,end}
FOLLOW(过程调用语句)={.,;,end}
FOLLOW(当型循环语句)={.,;,end}
FOLLOW(读语句)={.,;,end}
FOLLOW(写语句)={.,;,end}



